# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
from typing import Any, Dict, Optional, List, Set, Tuple
import json
import jieba
import jieba.posseg as pseg
import re

from hugegraph_llm.config import huge_settings
from hugegraph_llm.utils.log import log
from pyhugegraph.client import PyHugeClient


class RegexGremlinGenerate:
    def __init__(self):
        self._client = PyHugeClient(
            huge_settings.graph_ip,
            huge_settings.graph_port,
            huge_settings.graph_name,
            huge_settings.graph_user,
            huge_settings.graph_pwd,
            huge_settings.graph_space,
        )

    def _remove_nouns(self, text):
        text = re.sub(r"[^\w\u4e00-\u9fa5]", "", text)
        words = list(pseg.cut(text))
        non_noun_words = [word for word, flag in words if not flag.startswith("n")]
        noun_words = [word for word, flag in words if flag.startswith("n")]
        return non_noun_words, noun_words

    def _compare_non_noun_parts(self, source, target):
        source_filtered, source_nouns = self._remove_nouns(source)
        target_filtered, target_nouns = self._remove_nouns(target)

        if source_filtered == target_filtered:
            log.debug("The non-noun parts of the texts are identical.")
            return len(source_nouns) == len(target_nouns), source_nouns, target_nouns

        log.debug("The non-noun parts of the texts are different")
        log.debug(f"Source non noun words are: {source_filtered} & Targets' are: {target_filtered}")

        return False, [], []

    def _replace_gremlin_query(self, gremlin, source_filtered, target_filtered):
        for source_str, target_str in zip(source_filtered, target_filtered):
            gremlin = gremlin.replace(source_str, target_str)
        return gremlin

    def _generate_gremlin(self, query, examples):
        for example in examples:
            example_query = example["query"]
            example_gremlin = example["gremlin"]

            is_match, source, target = self._compare_non_noun_parts(example_query, query)
            if is_match:
                gremlin = self._replace_gremlin_query(example_gremlin, source, target)
                log.debug(f"Gremlin generated by regex is : {gremlin}")

                try:
                    result = self._client.gremlin().exec(gremlin=gremlin)["data"]
                    log.debug(f"Gremlin generated by regex execution res is : {result}")
                    return True, [json.dumps(item, ensure_ascii=False) for item in result]
                except Exception as e:
                    return False, None

        return False, None

    def _init_client(self, context):
        if not self._client:
            graph_client = context.get("graph_client")
            if isinstance(graph_client, PyHugeClient):
                self._client = graph_client
            else:
                self._client = PyHugeClient(
                    context.get("ip", "localhost"),
                    context.get("port", "8080"),
                    context.get("graph", "hugegraph"),
                    context.get("user", "admin"),
                    context.get("pwd", "admin"),
                    context.get("graphspace"),
                )
        assert self._client, "No valid graphdb client"

    def run(self, context: Dict[str, Any]) -> Dict[str, Any]:
        self._init_client(context)

        query = context.get("query")
        if not query:
            raise ValueError("Query is required")

        examples = context.get("match_result")
        if not examples:
            context["skip_llm_gremlin"] = False
            return context

        context["skip_llm_gremlin"], context["graph_result"] = self._generate_gremlin(query, examples)
        return context
